{"name":"vkontakte_api","body":"## Что это?\r\n`vkontakte_api` - ruby-адаптер для ВКонтакте API. Библиотека позволяет вызывать методы API, получая их результаты в виде `Hashie::Mash` и массивов с ними (за исключением предикатных методов, возвращающих `true` или `false`); загружать файлы на сервера ВКонтакте, а также поддерживает авторизацию всех 3 типов, предоставляемых сервисом.\r\n\r\nМетоды из пространств имен (например, `friends.get`) реализованы в виде цепных вызовов, например `app.friends.get(fields: [:last_name, :first_name])`. В соответствии с соглашениями в языке ruby, названия методов пишутся в snake_case, в отличие от официальной документации, использующей camelCase-стиль.\r\n\r\n## Как этим пользоваться?\r\nМожно использовать `vkontakte_api` как для авторизованных запросов (требующих авторизованного пользователя, типа `friends.get` или `groups.get` без параметра `:uid`), так и для неавторизованных (типа `users.get`).\r\n\r\n### Неавторизованные запросы\r\n\r\nНекоторые методы API не требуют авторизации, для их вызова достаточно создать объект `VkontakteApi::Client` и адресовать методы ему:\r\n\r\n``` ruby\r\nrequire 'vkontakte_api'\r\n@app = VkontakteApi::Client.new\r\n@app.users.get(uid: 1)\r\n```\r\n\r\n### Авторизованные запросы\r\n\r\nБольшинство методов API требуют предварительной авторизации, в результате которой приложение получает токен доступа. Для этой задачи можно использовать сторонние решения наподобие [omniauth](https://github.com/intridea/omniauth) и [omniauth-vkontakte](https://github.com/mamantoha/omniauth-vkontakte), либо воспользоваться механизмом авторизации, встроенным в `vkontakte_api`. В первом случае полученный токен нужно просто передать при создании клиента (`VkontakteApi::Client.new(token)`), а встроенную авторизацию рассмотрим подробнее.\r\n\r\n#### Авторизация\r\n\r\nСхема получения токена доступа следующая:\r\n\r\n* редиректим пользователя на ВКонтакте, там он подтверждает запрошенные права доступа\r\n* ВК редиректит его обратно в наше приложение, передавая в параметрах код\r\n* запрашиваем у ВК токен доступа, используя код, полученный шагом ранее\r\n* с токеном можно вызывать методы ВКонтакте API\r\n\r\nПервое, что нужно сделать - зарегистрировать приложение на vk.com. Идем [сюда](http://vk.com/editapp?act=create), вводим название приложения, его домен и тип (для данного примера - веб-сайт). После создания на странице редактирования приложения можно найти ID приложения и защищенный ключ.\r\n\r\nДалее необходимо указать в конфигурации `vkontakte_api` полученные данные, а также URL для редиректа на 2 шаге. Это делается следующим образом:\r\n\r\n``` ruby\r\nVkontakteApi.configure do |config|\r\n  config.app_id       = '123'      # ID приложения\r\n  config.app_secret   = 'AbCdE654' # защищенный ключ\r\n  config.redirect_uri = 'http://example.com/oauth/callback'\r\nend\r\n```\r\n\r\nДалее перебрасываем пользователя на ВК для получения прав на доступ к его данным. URL для редиректа возвращается методом `VkontakteApi.authorization_url`, в его опциях можно указать требуемые [права доступа](http://vk.com/developers.php?oid=-17680044&p=Application_Access_Rights):\r\n\r\n``` ruby\r\nVkontakteApi.authorization_url(scope: [:friends, :photos])\r\n```\r\n\r\nПри редиректе пользователя обратно в приложение будет передан параметр `code`:\r\n\r\n```\r\nhttp://example.com/oauth/callback?code=7a6fa4dff77a228eeda56603b8f53806c883f011c40b72630bb50df056f6479e52a\r\n```\r\n\r\nТеперь, когда у нас есть код, можно получить токен доступа. За это отвечает метод `VkontakteApi.authorize` - он получает токен и создает клиент, готовый к вызову методов, требующих авторизации:\r\n\r\n``` ruby\r\n@vk = VkontakteApi.authorize(code: params[:code])\r\n@vk.friends.get\r\n```\r\n\r\n#### Использование API\r\n\r\nКак уже говорилось, методы из пространств имен вызываются цепочкой, а названия пишутся в snake_case стиле. Параметры всех методов являются именованными, и передаются в виде хэша; при этом если необходимо передать список, разделенный запятыми, его можно оформить как массив из строк или символов - конкатенация произойдет автоматически. Возвращаемые значения - как правило, объекты `Hashie::Mash` (разновидность хэша, позволяющая доступ к элементам через методы, соответствующие ключам этого хэша) и содержащие их массивы.\r\n\r\n``` ruby\r\n@app.groups.get # => [1, 31022447]\r\n\r\nfriends = @app.friends.get(fields: [:uid, :first_name, :screen_name, :last_name])\r\nfriends.first.uid         # => \"1\"\r\nfriends.first.first_name  # => \"Павел\"\r\nfriends.first.screen_name # => \"durov\"\r\nfriends.first.last_name   # => \"Дуров\"\r\n```\r\n\r\nБолее подробно о вызове методов, загрузке файлов, авторизации, логгировании и настройке гема можно почитать в [README](https://github.com/7even/vkontakte_api#readme).\r\n\r\nПример интеграции `vkontakte_api` с rails-приложением можно посмотреть [здесь](http://vkontakte-on-rails.herokuapp.com); исходники проекта находятся [тут](https://github.com/7even/vkontakte_on_rails).","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Ruby-адаптер для ВКонтакте API","google":"UA-31422612-1"}